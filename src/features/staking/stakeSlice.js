import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { Delegate, UnDelegate } from '../../txns/proto';
import stakingService from './stakingService';
import { signAndBroadcastAmino, fee } from '../../txns/execute';

const initialState = {
  validators: {
    status: 'idle',
    active: {},
    inactive: {},
    activeSorted: {},
    inactiveSorted: {},
    errMsg: '',
    pagination: {
      next_key: null
    },
  },
  delegations: {
    status: 'idle',
    delegations: [],
    errMsg: '',
    pagination: {},
  },
  unbonding: {
    status: 'idle',
    delegations: [],
    errMsg: '',
    pagination: {},
  },
  params:{},
  tx: {
    status: 'idle',
    errMsg: '',
    txHash: '',
  }
};

export const txDelegate = createAsyncThunk(
  'staking/delegate',
  async (data, { rejectWithValue, fulfillWithValue }) => {
    try {
      const msg = Delegate(data.delegator,data.validator, data.amount, data.denom)
      const result = await signAndBroadcastAmino([msg], fee(data.denom, data.feeAmount), "", data.chainId, data.rpc)
      if (result?.code === 0) {
        return fulfillWithValue({txHash: result?.transactionHash});
        } else {
          return rejectWithValue(result?.rawLog);
        }
    } catch (error) {
      return rejectWithValue(error.response)
    }
  }
);

export const txUnDelegate = createAsyncThunk(
  'staking/undelegate',
  async (data, { rejectWithValue, fulfillWithValue }) => {
    try {
      const msg = UnDelegate(data.delegator,data.validator, data.amount, data.denom)
      const result = await signAndBroadcastAmino([msg], fee(data.denom, data.feeAmount), "", data.chainId, data.rpc)
      if (result?.code === 0) {
        return fulfillWithValue({txHash: result?.transactionHash});
        } else {
          return rejectWithValue(result?.rawLog);
        }
    } catch (error) {
      return rejectWithValue(error.response)
    }
  }
);

export const getValidators = createAsyncThunk(
  'staking/validators',
  async (data) => {
    const response = await stakingService.validtors(data.baseURL, data?.status, data.pagination);
    return response.data;
  }
);

export const getParams = createAsyncThunk(
  'staking/params',
  async (data) => {
    const response = await stakingService.params(data.baseURL);
    return response.data;
  }
);

export const getDelegations = createAsyncThunk(
  'staking/delegations',
  async (data) => {
    const response = await stakingService.delegations(data.baseURL,data.address, data.pagination);
    return response.data;
  }
);

export const getUnbonding = createAsyncThunk(
  'staking/unbonding',
  async (data) => {
    const response = await stakingService.unbonding(data.baseURL,data.address, data.pagination);
    return response.data;
  }
);


export const stakeSlice = createSlice({
  name: 'staking',
  initialState,
  reducers: {
    validators: (state, action) => {
      state.validators = action.payload
    },
    delegations: (state, action) => {
      state.delegations = action.payload
    },
    resetState: (state, action) => {
      state.validators = initialState.validators
      state.delegations = initialState.delegations
    },
    sortValidatorsByVotingPower: (state) => {
      const activeSort =  Object.fromEntries( Object.entries(state.validators.active).sort(([,a],[,b]) => {
        return b.tokens - a.tokens
      }));
      state.validators.active = activeSort

      const inactiveSort =  Object.fromEntries( Object.entries(state.validators.inactive).sort(([,a],[,b]) => {
        return b.tokens - a.tokens
      }));
      state.validators.inactive = inactiveSort
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getValidators.pending, (state) => {
        state.validators.status = 'loading';
        state.validators.errMsg = ''

      })
      .addCase(getValidators.fulfilled, (state, action) => {
        state.validators.status = 'idle';
        let result = {}
        result.validators = action.payload.validators;
        const res = action.payload.validators
        for (let index = 0; index < res.length; index++) {
          const element = res[index];
          if (element.status === 'BOND_STATUS_BONDED') {
            state.validators.active[element.operator_address] = element
          } else {
            state.validators.inactive[element.operator_address] = element
          }
        }
        state.validators.pagination = action.payload.pagination;
        state.validators.errMsg = ''
      })
      .addCase(getValidators.rejected, (state, action) => {
        state.validators.status = 'rejected';
        state.validators.errMsg = action.error.message
      })

    
      builder
      .addCase(getDelegations.pending, (state) => {
        state.delegations.status = 'loading';
        state.delegations.errMsg = ''
      })
      .addCase(getDelegations.fulfilled, (state, action) => {
        state.delegations.status = 'idle';
        state.delegations.delegations = action.payload.delegation_responses
        state.delegations.pagination = action.payload.pagination
        state.delegations.errMsg = ''
      })
      .addCase(getDelegations.rejected, (state, action) => {
        state.delegations.status = 'rejected';
        state.delegations.errMsg = action.error.message
      })

      builder
      .addCase(getUnbonding.pending, (state) => {
        state.unbonding.status = 'loading';
        state.unbonding.errMsg = ''
      })
      .addCase(getUnbonding.fulfilled, (state, action) => {
        state.unbonding.status = 'idle';
        state.unbonding.delegations = action.payload.unbonding_responses
        state.unbonding.pagination = action.payload.pagination
        state.unbonding.errMsg = ''
        
      })
      .addCase(getUnbonding.rejected, (state, action) => {
        state.unbonding.status = 'rejected';
        state.unbonding.errMsg = action.error.message
      })


      builder
      .addCase(getParams.pending, (state) => {
      })
      .addCase(getParams.fulfilled, (state, action) => {
        state.params = action.payload
      })
      .addCase(getParams.rejected, (state, action) => {})


      builder
      .addCase(txDelegate.pending, (state) => {
        state.tx.status = 'pending';
        state.tx.errMsg = '';
        state.tx.txHash = '';

      })
      .addCase(txDelegate.fulfilled, (state, action) => {
        state.tx.status = 'idle';
        state.tx.errMsg = '';
        state.tx.txHash = action.payload.txHash;
      })
      .addCase(txDelegate.rejected, (state, action) => {
        state.tx.status = 'rejected';
        state.tx.errMsg = action.error.message;
      })

      builder
      .addCase(txUnDelegate.pending, (state) => {
        state.tx.status = 'pending';
        state.tx.errMsg = '';
        state.tx.txHash = '';

      })
      .addCase(txUnDelegate.fulfilled, (state, action) => {
        state.tx.status = 'idle';
        state.tx.errMsg = '';
        state.tx.txHash = action.payload.txHash;
      })
      .addCase(txUnDelegate.rejected, (state, action) => {
        state.tx.status = 'rejected';
        state.tx.errMsg = action.error.message;
      })

      
  },
});

export const { resetState, sortValidatorsByVotingPower } = stakeSlice.actions;

export default stakeSlice.reducer;
