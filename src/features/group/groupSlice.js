import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import groupService from './groupService';

const initialState = {
  tx: {
    status: 'idle',
    type: ''
  },
  groups: {
    admin: {
      list: [],
      pagination: {},
    },
    member: {
      list: [],
      pagination: {},
    }
  }
};

export const getGroupsByAdmin = createAsyncThunk(
  'group/group-by-admin',
  async (data) => {
    const response = await groupService.groupsByAdmin(data.baseURL, data.admin, data.pagination);
    return response.data;
  }
);

export const getGroupsByMember = createAsyncThunk(
  'group/group-by-member',
  async (data) => {
    const response = await groupService.groupsByMember(data.baseURL, data.address, data.pagination);
    return response.data;
  }
);


export const groupSlice = createSlice({
  name: 'group',
  initialState,
  reducers: {
    resetTxType: (state, _) => {
      state.tx.type = ''
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getGroupsByAdmin.pending, (state) => {

      })
      .addCase(getGroupsByAdmin.fulfilled, (state, action) => {
        state.groups.admin.list = action.payload.groups
        state.groups.admin.pagination = action.payload.pagination
      })
      .addCase(getGroupsByAdmin.rejected, (state, action) => {
        console.log(action.error)
      })

    builder
      .addCase(getGroupsByMember.pending, (state) => {

      })
      .addCase(getGroupsByMember.fulfilled, (state, action) => {
        state.groups.member.list = action.payload.groups
        state.groups.member.pagination = action.payload.pagination
      })
      .addCase(getGroupsByMember.rejected, (state, action) => {
        console.log(action.error)
      })
  },
});


export default groupSlice.reducer;
